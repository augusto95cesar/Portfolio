// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VagaBackendTeste.Data;

namespace VagaBackendTeste.Application.Migrations
{
    [DbContext(typeof(VagaBackeneTesteContext))]
    [Migration("20201206234826_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Acessorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NomeAcessorio")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Acessorios");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.AnoLancamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Ano")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("AnoLancamentos");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Carro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodigoAno")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoModelo")
                        .HasColumnType("integer");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodigoAno");

                    b.HasIndex("CodigoModelo");

                    b.ToTable("Carros");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.CarroAcessorio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodigoAcessorio")
                        .HasColumnType("integer");

                    b.Property<int>("CodigoCarro")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CodigoAcessorio");

                    b.HasIndex("CodigoCarro");

                    b.ToTable("CarroAcessorios");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Foto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodigoCarro")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodigoCarro");

                    b.ToTable("Fotos");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("NomeMarca")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Modelo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CodigoMarca")
                        .HasColumnType("integer");

                    b.Property<int?>("MarcaId")
                        .HasColumnType("integer");

                    b.Property<string>("NomeModelo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CodigoMarca");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Carro", b =>
                {
                    b.HasOne("VagaBackendTeste.Domain.Entity.AnoLancamento", "AnoLancamento")
                        .WithMany()
                        .HasForeignKey("CodigoAno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VagaBackendTeste.Domain.Entity.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("CodigoModelo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.CarroAcessorio", b =>
                {
                    b.HasOne("VagaBackendTeste.Domain.Entity.Acessorio", "Acessorio")
                        .WithMany()
                        .HasForeignKey("CodigoAcessorio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VagaBackendTeste.Domain.Entity.Carro", "Carro")
                        .WithMany()
                        .HasForeignKey("CodigoCarro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Foto", b =>
                {
                    b.HasOne("VagaBackendTeste.Domain.Entity.Carro", "Carro")
                        .WithMany("Fotos")
                        .HasForeignKey("CodigoCarro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VagaBackendTeste.Domain.Entity.Modelo", b =>
                {
                    b.HasOne("VagaBackendTeste.Domain.Entity.Modelo", "MarcaModelo")
                        .WithMany()
                        .HasForeignKey("CodigoMarca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VagaBackendTeste.Domain.Entity.Marca", null)
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId");
                });
#pragma warning restore 612, 618
        }
    }
}
